"""
Задание 1
Реализовать скрипт, в котором должна быть предусмотрена функция расчета заработной платы сотрудника.
В расчете необходимо использовать формулу: (выработка в часах*ставка в час) + премия.
Для выполнения расчета для конкретных значений необходимо запускать скрипт с параметрами.
"""

def sal():
    try:
        time = float(input('Выработка в часах '))
        salary = int(input('Ставка '))
        bonus = int(input('Премия '))
        res = time * salary + bonus
        print(f'Заработная плата сотрудника  {res}')
    except ValueError:
        return print('Not a number')
sal()


"""
Задание 2
Представлен список чисел.
Необходимо вывести элементы исходного списка, значения которых больше предыдущего элемента.
"""

from random import randint

def run():
    start = [randint(0, 100) for _ in range(randint(5, 15))]
    print(f'Исходный список:\n {start}')
    finish = [start[index] for index in range(1, len(start)) if start[index] > start[index-1] ]
    print(f'Конечный список:\n {finish}')

run()


"""
Задание 3
Для чисел в пределах от 20 до 240 найти числа, кратные 20 или 21.
Необходимо решить задание в одну строку.
"""

print([num for num in range(20, 240) if num % 20 == 0 or num % 21 == 0])


"""
Задание 4
"""
Представлен список чисел.
Определить элементы списка, не имеющие повторений.
Сформировать итоговый массив чисел, соответствующих требованию.
Элементы вывести в порядке их следования в исходном списке.
Для выполнения задания обязательно использовать генератор.
"""

from itertools import permutations
from itertools import repeat
from itertools import combinations
my_list = [2, 2, 2, 7, 23, 1, 44, 44, 3, 2, 10, 7, 4, 11]
new = [el for el in my_list if my_list.count(el)==1]
print(new)

"""
Задание 5
"""
 Реализовать формирование списка, используя функцию range() и возможности генератора.
 В список должны войти четные числа от 100 до 1000 (включая границы).
 Необходимо получить результат вычисления произведения всех элементов списка.
"""

from functools import reduce
my_list = [el for el in range(100, 1001) if el % 2 == 0]
def my_func(prev_el, el):
    return prev_el * el

print(reduce(my_func, my_list))


"""
Задание 6
"""
Реализовать два небольших скрипта:
а) итератор, генерирующий целые числа, начиная с указанного,
б) итератор, повторяющий элементы некоторого списка, определенного заранее.
Подсказка: использовать функцию count() и cycle() модуля itertools.
Обратите внимание, что создаваемый цикл не должен быть бесконечным. Необходимо предусмотреть условие его завершения.
"""

а)

from itertools import count

def my_count_func(start_number, stop_number):
    for el in count(start_number):
        if el > stop_number:
            break
        else:
            print(el)
my_count_func(start_number = int(input("Начало отсчета с : ")), stop_number = int(input("Завершить отсчет на : ")))


б)

from itertools import cycle

def my_cycle_func(my_list, iteration):
    i = 0
    iter = cycle(my_list)
    while i < iteration:
        print(next(iter))
        i+=1
my_cycle_func(my_list = [4, 2, 2, 1], iteration = int(input("Введите число повторений: "))) 


"""
Задание 7
"""
Реализовать генератор с помощью функции с ключевым словом yield, создающим очередное значение.
При вызове функции должен создаваться объект-генератор. Функция должна вызываться следующим образом: for el in fact(n).
Функция отвечает за получение факториала числа, а в цикле необходимо выводить только первые n чисел, начиная с 1! и до n!.
"""

---


